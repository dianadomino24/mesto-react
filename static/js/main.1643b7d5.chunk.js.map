{"version":3,"sources":["utils/Api.js","components/Header.js","components/Card.js","components/Main.js","components/Footer.js","components/PopupWithForm.js","components/ImagePopup.js","components/App.js","serviceWorker.js","index.js","images/logo.svg"],"names":["api","baseUrl","headers","this","label","fetch","concat","then","res","ok","json","Promise","reject","status","item","method","body","JSON","stringify","title","id","authorization","Header","className","href","src","logoPath","alt","Card","props","owner","_id","currentUserId","link","name","onClick","onCardClick","card","likes","length","Main","onEditProfile","onAddPlace","onEditAvatar","userName","userDescription","userAvatar","cards","handleCardClick","style","backgroundImage","map","key","Footer","PopupWithForm","buttonText","isOpen","onClose","children","window","addEventListener","evt","handleEscClose","event","target","currentTarget","noValidate","autoFocus","type","ImagePopup","App","useState","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","setUserAvatar","setUserName","setUserInfo","setCards","setCurrentUserId","selectedCard","setSelectedCard","closeAllPopups","useEffect","getItems","userData","avatar","about","setUserData","catch","err","console","log","serverCards","items","placeholder","required","minLength","maxLength","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.1643b7d5.chunk.js","sourcesContent":["class Api {\n    constructor({ baseUrl, headers }) {\n        this.baseUrl = baseUrl\n        this.headers = headers\n    }\n\n    getItems(label) {\n        return fetch(this.baseUrl.concat(label), {\n            headers: this.headers,\n        }).then((res) => {\n            if (res.ok) {\n                return res.json()\n            }\n            return Promise.reject(`Ошибка: ${res.status}`)\n        })\n    }\n\n    createItem(item, label) {\n        return fetch(this.baseUrl.concat(label), {\n            method: 'POST',\n            headers: this.headers,\n            body: JSON.stringify(item),\n        }).then((res) => {\n            if (res.ok) {\n                return res.json()\n            }\n            return Promise.reject(`Ошибка: ${res.status}`)\n        })\n    }\n\n    changeItem(item, title) {\n        return fetch(this.baseUrl.concat(title), {\n            method: 'PATCH',\n            headers: this.headers,\n            body: JSON.stringify(item),\n        }).then((res) => {\n            if (res.ok) {\n                return res.json()\n            }\n            return Promise.reject(`Ошибка: ${res.status}`)\n        })\n    }\n\n    replaceItem(title, id) {\n        return fetch(this.baseUrl.concat(title).concat(`/${id}`), {\n            method: 'PUT',\n            headers: this.headers,\n            // body: JSON.stringify(item)\n        }).then((res) => {\n            if (res.ok) {\n                return res.json()\n            }\n            return Promise.reject(`Ошибка: ${res.status}`)\n        })\n    }\n\n    deleteItem(title, id) {\n        return fetch(this.baseUrl.concat(title).concat(`/${id}`), {\n            method: 'DELETE',\n            headers: this.headers,\n        }).then((res) => {\n            if (res.ok) {\n                return res.json()\n            }\n            return Promise.reject(`Ошибка: ${res.status}`)\n        })\n    }\n}\n\nconst token = '3829caf2-6683-412f-9e00-d0870fcd1817'\nconst cohort = 'cohort-14'\n\nconst api = new Api({\n    baseUrl: `https://mesto.nomoreparties.co/v1/${cohort}/`,\n    headers: {\n        authorization: token,\n        'Content-Type': 'application/json',\n    },\n})\n\nexport default api\n\n//  - получить список всех карточек в виде массива (GET)\n//  - добавить карточку (POST)\n//  - удалить карточку (DELETE)\n//  - получить данные пользователя (GET)\n//  - заменить данные пользователя (PATCH)\n//  - заменить аватар (PATCH)\n//  - “залайкать” карточку (PUT)\n//  - удалить лайк карточки (DELETE)\n","import React from 'react'\nimport logoPath from '../images/logo.svg'\n\nfunction Header() {\n    return (\n        <header className=\"header page__header section\">\n            <a href=\"#\" className=\"logo header__logo\">\n                <img\n                    className=\"logo__image\"\n                    src={logoPath}\n                    alt=\"Логотип проекта Mesto\"\n                />\n            </a>\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react'\n\nexport default function Card(props) {\n    function handleClick() {\n        props.onCardClick(props.card)\n    }\n\n    return (\n        <li className=\"places__item\">\n            <figure className=\"place\">\n                {/* проверит, моя ли карточка и отключит кнопку удаления у чужих */}\n                <button\n                    className={\n                        props.owner._id === props.currentUserId\n                            ? 'link place__delete-button'\n                            : 'link place__delete-button place__delete-button_disabled'\n                    }\n                ></button>\n                <img\n                    src={props.link}\n                    alt={props.name}\n                    className=\"place__image\"\n                    onClick={handleClick}\n                />\n                <div className=\"place__wrapper\">\n                    <h2 className=\"place__name\">{props.name} </h2>\n                    <button className=\"place__like-button-container\">\n                        {/* проверит, залайкана ли мной ранее карточка*/}\n                        <div\n                            className={\n                                props.owner._id === props.currentUserId\n                                    ? 'place__like-button place__like-button_active'\n                                    : 'place__like-button'\n                            }\n                        ></div>\n                        <div className=\"place__like-counter\">\n                            {props.likes.length}\n                        </div>\n                    </button>\n                </div>\n            </figure>\n        </li>\n    )\n}\n","import React from 'react'\nimport Card from './Card'\n\nfunction Main({\n    onEditProfile,\n    onAddPlace,\n    onEditAvatar,\n    userName,\n    userDescription,\n    userAvatar,\n    cards,\n    currentUserId,\n    handleCardClick,\n    ...rest\n}) {\n    // // для проверки, есть ли в списке картинки, если нет, то делает видимой надпись о пустом списке\n    // //в placesList всегда есть минимум 1 элемент - надпись о пустом списке\n    // function check() {\n    //     const placesList = document.querySelector('.places__list')\n    //     return (placesList.children.length === 1? \"places__empty-list places__empty-list_visible\" : \"places__empty-list\")\n    // }\n\n    return (\n        <main className=\"content page__content section\">\n            <section className=\"profile section\">\n                <div\n                    className=\"profile__image\"\n                    onClick={onEditAvatar}\n                    style={{ backgroundImage: `url(${userAvatar})` }}\n                ></div>\n                <div className=\"profile__info\">\n                    <div className=\"profile__name-wrap\">\n                        <h1 className=\"profile__name\">{userName}</h1>\n                        <button\n                            className=\"link profile__edit-button\"\n                            onClick={onEditProfile}\n                        ></button>\n                    </div>\n                    <p className=\"profile__job\">{userDescription}</p>\n                </div>\n                <button\n                    className=\"link profile__add-button\"\n                    onClick={onAddPlace}\n                ></button>\n            </section>\n            <section className=\"places section\">\n                <ul className=\"places__list\">\n                    <li className=\"places__empty-list\">Нет добавленных мест</li>\n                    {cards.map((card) => (\n                        <Card\n                            key={card._id}\n                            currentUserId={currentUserId}\n                            onCardClick={handleCardClick}\n                            card={card}\n                            {...card}\n                        />\n                    ))}\n                </ul>\n            </section>\n        </main>\n    )\n}\n\nexport default Main\n","import React from 'react'\n\nfunction Footer() {\n    return (\n        <footer className=\"footer section page__footer\">\n            <p className=\"footer__copyright\">&copy; 2020 Mesto Russia</p>\n        </footer>\n    )\n}\n\nexport default Footer\n","import React from 'react'\n\nfunction PopupWithForm({\n    title,\n    name,\n    buttonText,\n    isOpen,\n    onClose,\n    children,\n    ...rest\n}) {\n    //закрывает при нажатии esc\n    function handleEscClose(evt) {\n        if (evt.key === 'Escape') {\n            onClose()\n        }\n    }\n    //закрывает попап при нажатии на фон\n    function closePopupByClickingOverlay(event) {\n        if (event.target === event.currentTarget) {\n            onClose()\n        }\n    }\n\n    if (isOpen) {\n        window.addEventListener('keydown', (evt) => handleEscClose(evt))\n    }\n\n    return (\n        <section\n            className={`popup popup_type_${name} ${\n                isOpen ? 'popup_opened' : ''\n            }`}\n            onClick={closePopupByClickingOverlay}\n        >\n            <div className=\"popup__container\">\n                <button\n                    className=\"link popup__close-button\"\n                    onClick={onClose}\n                ></button>\n                <form\n                    className={`popup__form popup__form_type_${name}`}\n                    noValidate\n                    name={name}\n                >\n                    <h2 className=\"popup__title\">{title}</h2>\n                    <fieldset className=\"popup__fieldset\">\n                        {children}\n                        <button\n                            className=\"link popup__save-button\"\n                            autoFocus\n                            type=\"submit\"\n                        >\n                            {buttonText}\n                        </button>\n                    </fieldset>\n                </form>\n            </div>\n        </section>\n    )\n}\n\nexport default PopupWithForm\n","import React from 'react'\n\nfunction ImagePopup(props) {\n    //закрывает при нажатии esc\n    function handleEscClose(evt) {\n        if (evt.key === 'Escape') {\n            props.onClose()\n        }\n    }\n    //закрывает попап при нажатии на фон\n    function closePopupByClickingOverlay(event) {\n        if (event.target === event.currentTarget) {\n            props.onClose()\n        }\n    }\n\n    if (props.card) {\n        window.addEventListener('keydown', (evt) => handleEscClose(evt))\n\n        return (\n            <section\n                className=\"popup popup_opened popup_type_picture-zoom\"\n                onClick={closePopupByClickingOverlay}\n            >\n                <div className=\"popup__container-pic-zoom\">\n                    <button\n                        className=\"link popup__close-button\"\n                        onClick={props.onClose}\n                    ></button>\n                    <figure className=\"picture-zoom\">\n                        <img\n                            src={props.card.link}\n                            alt={props.card.name}\n                            className=\"picture-zoom__img\"\n                        />\n                        <p className=\"picture-zoom__title\">{props.card.name}</p>\n                    </figure>\n                </div>\n            </section>\n        )\n    } else return ''\n}\n\nexport default ImagePopup\n","import React, { useEffect, useState } from 'react'\nimport api from '../utils/Api'\n// import Card from './Card'\nimport Header from './Header'\nimport Main from './Main'\nimport Footer from './Footer'\nimport PopupWithForm from './PopupWithForm'\nimport ImagePopup from './ImagePopup'\n\nfunction App() {\n    //состояние попапов\n    const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false)\n    const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false)\n    const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false)\n\n    // данные пользователя\n    const [userAvatar, setUserAvatar] = useState()\n    const [userName, setUserName] = useState('Жак Ив Кусто')\n    const [userDescription, setUserInfo] = useState('Мореплаватель')\n\n    // массив карточек мест\n    const [cards, setCards] = useState([])\n    // для определения, чьи карточки (выкл удаление чужих и показать ранее залайканные)\n    const [currentUserId, setCurrentUserId] = useState()\n\n    // для попапа с полноразмерной картинкой\n    const [selectedCard, setSelectedCard] = useState()\n\n    // устанавливает данные пользователя\n    function setUserData(userData) {\n        setUserAvatar(userData.avatar)\n        setUserName(userData.name)\n        setUserInfo(userData.about)\n    }\n\n    // открывают попапы\n    function handleEditAvatarClick() {\n        setIsEditAvatarPopupOpen(true)\n    }\n    function handleEditProfileClick() {\n        setIsEditProfilePopupOpen(true)\n    }\n    function handleAddPlaceClick() {\n        setIsAddPlacePopupOpen(true)\n    }\n\n    //для открытия попапа с увеличенной картинкой\n    function handleCardClick(card) {\n        setSelectedCard(card)\n    }\n\n    // закрывает все попапы меняя их состояние\n    function closeAllPopups() {\n        setIsEditAvatarPopupOpen(false)\n        setIsEditProfilePopupOpen(false)\n        setIsAddPlacePopupOpen(false)\n        setSelectedCard()\n    }\n\n    // при монтировании компонента будет совершать запрос в API за пользовательскими данными\n    useEffect(() => {\n        api.getItems('users/me')\n            .then((userData) => {\n                setCurrentUserId(userData._id)\n                // отображает данные пользователья в профиле\n                setUserData(userData)\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    }, [])\n\n    // при монтировании компонента будет совершать запрос в API за карточками мест\n    useEffect(() => {\n        api.getItems('cards')\n            .then((serverCards) => {\n                const items = serverCards.map((item) => ({\n                    name: item.name,\n                    link: item.link,\n                    _id: item._id,\n                    likes: item.likes,\n                    owner: item.owner,\n                }))\n                setCards(items)\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <div className=\"page\">\n                <div className=\"page__container\">\n                    <Header />\n                    <Main\n                        onEditProfile={handleEditProfileClick}\n                        onAddPlace={handleAddPlaceClick}\n                        onEditAvatar={handleEditAvatarClick}\n                        userAvatar={userAvatar}\n                        userName={userName}\n                        userDescription={userDescription}\n                        cards={cards}\n                        currentUserId={currentUserId}\n                        handleCardClick={handleCardClick}\n                    />\n                    <Footer />\n                    <PopupWithForm\n                        title=\"Редактировать профиль\"\n                        name=\"edit-profile\"\n                        buttonText=\"Сохранить\"\n                        isOpen={isEditProfilePopupOpen}\n                        onClose={closeAllPopups}\n                        children={\n                            <>\n                                <label className=\"popup__label\">\n                                    <input\n                                        type=\"text\"\n                                        name=\"profile-name\"\n                                        placeholder=\"Имя\"\n                                        id=\"profile-name\"\n                                        className=\"input popup__input popup__input_type_name\"\n                                        required\n                                        minLength=\"2\"\n                                        maxLength=\"40\"\n                                    />\n                                    <span className=\"popup__input-error js-popup__input-error_type_profile\"></span>\n                                </label>\n                                <label className=\"popup__label\">\n                                    <input\n                                        type=\"text\"\n                                        name=\"profile-job\"\n                                        id=\"profile-job\"\n                                        placeholder=\"Род деятельности\"\n                                        className=\"input popup__input popup__input_type_job\"\n                                        required\n                                        minLength=\"2\"\n                                        maxLength=\"200\"\n                                    />\n                                    <span className=\"popup__input-error js-popup__input-error_type_profile\"></span>\n                                </label>\n                            </>\n                        }\n                    />\n\n                    <PopupWithForm\n                        title=\"Новое место\"\n                        name=\"add-place\"\n                        buttonText=\"Создать\"\n                        isOpen={isAddPlacePopupOpen}\n                        onClose={closeAllPopups}\n                        children={\n                            <>\n                                <label className=\"popup__label\">\n                                    <input\n                                        type=\"text\"\n                                        name=\"place-name\"\n                                        placeholder=\"Название\"\n                                        id=\"place-name\"\n                                        className=\"input popup__input popup__input_type_place-name\"\n                                        required\n                                        minLength=\"2\"\n                                        maxLength=\"30\"\n                                    />\n                                    <span className=\"popup__input-error\"></span>\n                                </label>\n                                <label className=\"popup__label\">\n                                    <input\n                                        type=\"url\"\n                                        name=\"place-pic\"\n                                        id=\"place-pic\"\n                                        placeholder=\"Ссылка на картинку\"\n                                        className=\"input popup__input popup__input_type_place-pic\"\n                                        required\n                                    />\n                                    <span className=\"popup__input-error\"></span>\n                                </label>\n                            </>\n                        }\n                    />\n\n                    <PopupWithForm\n                        title=\"Обновить аватар\"\n                        name=\"edit-avatar\"\n                        buttonText=\"Сохранить\"\n                        isOpen={isEditAvatarPopupOpen}\n                        onClose={closeAllPopups}\n                        children={\n                            <>\n                                <label className=\"popup__label\">\n                                    <input\n                                        type=\"url\"\n                                        name=\"avatar\"\n                                        id=\"avatar\"\n                                        placeholder=\"Ссылка на картинку\"\n                                        className=\"input popup__input popup__input_type_avatar\"\n                                        required\n                                    />\n                                    <span className=\"popup__input-error\"></span>\n                                </label>\n                            </>\n                        }\n                    />\n\n                    <PopupWithForm\n                        title=\"Вы уверены?\"\n                        name=\"card-delete\"\n                        buttonText=\"Да\"\n                        isOpen={false}\n                        onClose={closeAllPopups}\n                        children={<></>}\n                    />\n\n                    <ImagePopup card={selectedCard} onClose={closeAllPopups} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/logo.a56cd5e0.svg\";"],"sourceRoot":""}