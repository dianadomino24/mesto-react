{"version":3,"sources":["utils/api.js","components/Header.js","contexts/CurrentUserContext.js","components/Card.js","components/Main.js","components/Footer.js","utils/utils.js","components/FormValidator.js","components/PopupWithForm.js","components/PopupWithSubmit.js","components/ImagePopup.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/App.js","serviceWorker.js","index.js","images/logo.svg"],"names":["api","baseUrl","headers","this","res","ok","json","Promise","reject","Error","status","label","fetch","concat","then","_getResponseData","item","method","body","JSON","stringify","title","cardId","notLiked","replaceItem","deleteItem","id","authorization","Header","className","href","src","logoPath","alt","CurrentUserContext","React","createContext","Card","onCardClick","card","onCardLike","onCardDelete","owner","likes","name","link","currentUserData","useContext","isOwn","_id","cardLikeButtonClassName","some","i","onClick","evt","placeEvt","target","closest","length","Main","onEditProfile","onAddPlace","onEditAvatar","handleCardClick","cards","style","backgroundImage","avatar","about","map","key","Footer","formSelectorsObj","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorActiveClass","controlSelector","FormValidator","formElement","_formSelectorsObj","_formElement","_inputList","Array","from","querySelectorAll","_buttonElement","querySelector","_inactiveButtonClass","_inputErrorClass","_errorActiveClass","_controlSelector","inputElement","errorMessage","errorElement","_findInputError","textContent","classList","add","remove","inputElementNoSpacing","value","trim","_isInputWithoutSpacingInvalid","validity","valid","_hideInputError","_showInputError","validationMessage","alert","hasInvalidInput","_toggleButtonState","forEach","addEventListener","_checkInputValidity","_setEventListeners","PopupWithForm","buttonText","isOpen","onClose","onSubmit","children","formValidate","currentForm","document","formValidator","enableValidation","closeReset","reset","window","removeEventListener","handleEscClose","event","currentTarget","noValidate","e","preventDefault","autoFocus","type","PopupWithSubmit","cardDOM","onCardDeleteSubmit","ImagePopup","close","EditProfilePopup","onUpdateUser","currentUser","useState","setName","description","setDescription","useEffect","onChange","placeholder","required","minLength","maxLength","EditAvatarPopup","onUpdateAvatar","avatarInput","useRef","setAvatar","current","ref","AddPlacePopup","cardName","setCardName","cardDescription","setCardDescription","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isCardDeletePopupOpen","setIsCardDeletePopupOpen","isImgPopupOpen","setIsImgPopupOpen","setCards","setCurrentUser","selectedCard","setSelectedCard","selectedCardDOM","setSelectedCardDOM","closeAllPopups","inputErrors","error","cleanInputErrors","renderLoading","isLoading","button","text","all","getItems","values","userData","serverCards","items","catch","err","console","log","Provider","isLiked","changeLikeCardStatus","newCard","newCards","c","cardDOMElement","profileSubmitButton","changeItem","finally","placeSubmitButton","createItem","avatarSubmitButton","cardDeleteSubmitButton","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.a234d810.chunk.js","sourcesContent":["class Api {\r\n    constructor({ baseUrl, headers }) {\r\n        this.baseUrl = baseUrl\r\n        this.headers = headers\r\n    }\r\n\r\n    _getResponseData(res) {\r\n        if (res.ok) {\r\n            return res.json()\r\n        }\r\n        return Promise.reject(new Error(`Ошибка: ${res.status}`))\r\n    }\r\n    getItems(label) {\r\n        return fetch(this.baseUrl.concat(label), {\r\n            headers: this.headers,\r\n        }).then((res) => {\r\n            return this._getResponseData(res)\r\n        })\r\n    }\r\n\r\n    createItem(item, label) {\r\n        return fetch(this.baseUrl.concat(label), {\r\n            method: 'POST',\r\n            headers: this.headers,\r\n            body: JSON.stringify(item),\r\n        }).then((res) => {\r\n            return this._getResponseData(res)\r\n        })\r\n    }\r\n\r\n    changeItem(item, title) {\r\n        return fetch(this.baseUrl.concat(title), {\r\n            method: 'PATCH',\r\n            headers: this.headers,\r\n            body: JSON.stringify(item),\r\n        }).then((res) => {\r\n            return this._getResponseData(res)\r\n        })\r\n    }\r\n\r\n    changeLikeCardStatus(cardId, notLiked) {\r\n        if (notLiked) {\r\n            return this.replaceItem('cards/likes', cardId)\r\n        } else {\r\n            return this.deleteItem('cards/likes', cardId)\r\n        }\r\n    }\r\n\r\n    replaceItem(title, id) {\r\n        return fetch(this.baseUrl.concat(title).concat(`/${id}`), {\r\n            method: 'PUT',\r\n            headers: this.headers,\r\n            // body: JSON.stringify(item)\r\n        }).then((res) => {\r\n            return this._getResponseData(res)\r\n        })\r\n    }\r\n\r\n    deleteItem(title, id) {\r\n        return fetch(this.baseUrl.concat(title).concat(`/${id}`), {\r\n            method: 'DELETE',\r\n            headers: this.headers,\r\n        }).then((res) => {\r\n            return this._getResponseData(res)\r\n        })\r\n    }\r\n}\r\n\r\nconst token = '3829caf2-6683-412f-9e00-d0870fcd1817'\r\nconst cohort = 'cohort-14'\r\n\r\nconst api = new Api({\r\n    baseUrl: `https://mesto.nomoreparties.co/v1/${cohort}/`,\r\n    headers: {\r\n        authorization: token,\r\n        'Content-Type': 'application/json',\r\n    },\r\n})\r\n\r\nexport default api\r\n\r\n//  - получить список всех карточек в виде массива (GET)\r\n//  - добавить карточку (POST)\r\n//  - удалить карточку (DELETE)\r\n//  - получить данные пользователя (GET)\r\n//  - заменить данные пользователя (PATCH)\r\n//  - заменить аватар (PATCH)\r\n//  - “залайкать” карточку (PUT)\r\n//  - удалить лайк карточки (DELETE)\r\n","import React from 'react'\nimport logoPath from '../images/logo.svg'\n\nfunction Header() {\n    return (\n        <header className=\"header page__header section\">\n            <a href=\"/\" className=\"logo header__logo\">\n                <img\n                    className=\"logo__image\"\n                    src={logoPath}\n                    alt=\"Логотип проекта Mesto\"\n                />\n            </a>\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react'\r\n\r\nexport const CurrentUserContext = React.createContext()\r\n","import React from 'react'\nimport { CurrentUserContext } from '../contexts/CurrentUserContext'\n\nexport default function Card({\n    onCardClick,\n    card,\n    onCardLike,\n    onCardDelete,\n    owner,\n    likes,\n    name,\n    link,\n}) {\n    // будет открывать попап с картинкой\n    function handleClick() {\n        onCardClick(card)\n    }\n    function handleLike() {\n        onCardLike(card)\n    }\n    function handleDelete(evt) {\n        //сохраняет дом элемент, который надо будет удалить из разметки\n        const placeEvt = evt.target.closest('.places__item')\n        onCardDelete(card, placeEvt)\n    }\n    const currentUserData = React.useContext(CurrentUserContext)\n\n    // Определяем, являемся ли мы владельцем текущей карточки\n    const isOwn = owner._id === currentUserData._id\n\n    // Определяем, есть ли у карточки лайк, поставленный текущим пользователем\n    const isLiked = likes.some((i) => i._id === currentUserData._id)\n\n    // Создаём переменную, которую после зададим в `className` для кнопки лайка\n    const cardLikeButtonClassName = isLiked\n        ? 'place__like-button place__like-button_active'\n        : 'place__like-button'\n\n    return (\n        <li className=\"places__item\">\n            <figure className=\"place\">\n                {/* проверит, моя ли карточка и отключит кнопку удаления у чужих */}\n                <button\n                    className={\n                        isOwn\n                            ? 'link place__delete-button'\n                            : 'link place__delete-button place__delete-button_disabled'\n                    }\n                    onClick={handleDelete}\n                />\n                <img\n                    src={link}\n                    alt={name}\n                    className=\"place__image\"\n                    onClick={handleClick}\n                />\n                <div className=\"place__wrapper\">\n                    <h2 className=\"place__name\">{name} </h2>\n                    <button className=\"place__like-button-container\">\n                        {/* проверит, залайкана ли мной ранее карточка*/}\n                        <div\n                            className={cardLikeButtonClassName}\n                            onClick={handleLike}\n                        ></div>\n                        <div className=\"place__like-counter\">\n                            {likes.length}\n                        </div>\n                    </button>\n                </div>\n            </figure>\n        </li>\n    )\n}\n","import React from 'react'\nimport Card from './Card'\nimport { CurrentUserContext } from '../contexts/CurrentUserContext'\n\nfunction Main({\n    onEditProfile,\n    onAddPlace,\n    onEditAvatar,\n    handleCardClick,\n    cards,\n    onCardLike,\n    onCardDelete,\n}) {\n    const currentUserData = React.useContext(CurrentUserContext)\n\n    return (\n        <main className=\"content page__content section\">\n            <section className=\"profile section\">\n                <div\n                    className=\"profile__image\"\n                    onClick={onEditAvatar}\n                    style={{\n                        backgroundImage: `url(${currentUserData.avatar})`,\n                    }}\n                ></div>\n                <div className=\"profile__info\">\n                    <div className=\"profile__name-wrap\">\n                        <h1 className=\"profile__name\">\n                            {currentUserData.name}\n                        </h1>\n                        <button\n                            className=\"link profile__edit-button\"\n                            onClick={onEditProfile}\n                        />\n                    </div>\n                    <p className=\"profile__job\">{currentUserData.about}</p>\n                </div>\n                <button\n                    className=\"link profile__add-button\"\n                    onClick={onAddPlace}\n                />\n            </section>\n            <section className=\"places section\">\n                <ul className=\"places__list\">\n                    <li className=\"places__empty-list\">Нет добавленных мест</li>\n                    {cards.map((card) => (\n                        <Card\n                            key={card._id}\n                            onCardClick={handleCardClick}\n                            card={card}\n                            onCardLike={onCardLike}\n                            onCardDelete={onCardDelete}\n                            {...card}\n                        />\n                    ))}\n                </ul>\n            </section>\n        </main>\n    )\n}\n\nexport default Main\n\n// // для проверки, есть ли в списке картинки, если нет, то делает видимой надпись о пустом списке\n// //в placesList всегда есть минимум 1 элемент - надпись о пустом списке\n// function check() {\n//     const placesList = document.querySelector('.places__list')\n//     return (placesList.children.length === 1? \"places__empty-list places__empty-list_visible\" : \"places__empty-list\")\n// }\n","import React from 'react'\n\nfunction Footer() {\n    return (\n        <footer className=\"footer section page__footer\">\n            <p className=\"footer__copyright\">&copy; 2020 Mesto Russia</p>\n        </footer>\n    )\n}\n\nexport default Footer\n","// объект настроек с селекторами и классами формы\nexport const formSelectorsObj = {\n    formSelector: '.popup__form',\n    inputSelector: '.popup__input',\n    submitButtonSelector: '.popup__save-button',\n    inactiveButtonClass: 'popup__save-button_disabled',\n    inputErrorClass: '.popup__input-error',\n    errorActiveClass: 'popup__input-error_active',\n    controlSelector: '.popup__label',\n}\n","//кейсы проверки валидности\r\nconst VALID = 0\r\nconst INVALID_EMPTY = 1\r\nconst INVALID_TOOSHORT = 2\r\n\r\n//скрывает уведомления об ошибках в инпутах (используется на открытом попапе в index.js)\r\nexport function cleanInputErrors() {\r\n    const inputErrors = document.querySelectorAll('.popup__input-error')\r\n\r\n    if (inputErrors) {\r\n        inputErrors.forEach((error) =>\r\n            error.classList.remove('popup__input-error_active')\r\n        )\r\n    }\r\n}\r\n\r\nexport class FormValidator {\r\n    constructor(formSelectorsObj, formElement) {\r\n        this._formSelectorsObj = formSelectorsObj\r\n        this._formElement = formElement\r\n        this._inputList = Array.from(\r\n            formElement.querySelectorAll(formSelectorsObj.inputSelector)\r\n        )\r\n        this._buttonElement = formElement.querySelector(\r\n            formSelectorsObj.submitButtonSelector\r\n        )\r\n        this._inactiveButtonClass = formSelectorsObj.inactiveButtonClass\r\n        this._inputErrorClass = formSelectorsObj.inputErrorClass\r\n        this._errorActiveClass = formSelectorsObj.errorActiveClass\r\n        this._controlSelector = formSelectorsObj.controlSelector\r\n    }\r\n\r\n    // находит элемент ошибки в ближайшем к текущему инпуту лэйбле\r\n    _findInputError(inputElement) {\r\n        return inputElement\r\n            .closest(this._controlSelector)\r\n            .querySelector(this._inputErrorClass)\r\n    }\r\n\r\n    //показывает сообщение об ошибке\r\n    _showInputError(inputElement, errorMessage) {\r\n        const errorElement = this._findInputError(inputElement)\r\n        errorElement.textContent = errorMessage\r\n        errorElement.classList.add(this._errorActiveClass)\r\n    }\r\n\r\n    //скрывает сообщение об ошибке\r\n    _hideInputError(inputElement) {\r\n        const errorElement = this._findInputError(inputElement)\r\n        errorElement.classList.remove(this._errorActiveClass)\r\n        errorElement.textContent = ''\r\n    }\r\n\r\n    //проверяет длину инпутов, очищенных от пробелов\r\n    _isInputWithoutSpacingInvalid(inputElement) {\r\n        const inputElementNoSpacing = inputElement.value.trim()\r\n\r\n        if (inputElementNoSpacing.length === 0) {\r\n            return INVALID_EMPTY\r\n        }\r\n        //если введено меньше 2 символов\r\n        if (inputElementNoSpacing.length < 2) {\r\n            return INVALID_TOOSHORT\r\n        }\r\n        return VALID\r\n    }\r\n\r\n    //проверяет валидность инпутов с учетом пробелов и выводит на стр соответствующие ошибки\r\n    _checkInputValidity(inputElement) {\r\n        const errorElement = this._findInputError(inputElement)\r\n\r\n        switch (this._isInputWithoutSpacingInvalid(inputElement)) {\r\n            //если поле пусто, не считая пробелы\r\n            case INVALID_EMPTY:\r\n                errorElement.textContent = 'Заполните это поле.'\r\n                errorElement.classList.add(this._errorActiveClass)\r\n                break\r\n            //если выбросить пробелы и в поле 1 символ\r\n            case INVALID_TOOSHORT:\r\n                errorElement.textContent =\r\n                    'Текст должен быть не короче 2 симв. Длина текста сейчас: 1 символ.'\r\n                errorElement.classList.add(this._errorActiveClass)\r\n                break\r\n            //если без пробелов в поле 2 символа, то проверим их валидность\r\n            case VALID:\r\n                if (!inputElement.validity.valid) {\r\n                    this._showInputError(\r\n                        inputElement,\r\n                        inputElement.validationMessage\r\n                    )\r\n                } else {\r\n                    this._hideInputError(inputElement)\r\n                }\r\n                break\r\n\r\n            default:\r\n                alert('error')\r\n        }\r\n    }\r\n\r\n    //вернет true, если есть невалидный инпут (с учетом проверки пробелов)\r\n    hasInvalidInput() {\r\n        return this._inputList.some((inputElement) => {\r\n            return (\r\n                !inputElement.validity.valid ||\r\n                this._isInputWithoutSpacingInvalid(inputElement)\r\n            )\r\n        })\r\n    }\r\n\r\n    //(раз)блокирует кнопку submit, если есть невалидные инпуты\r\n    _toggleButtonState() {\r\n        if (this.hasInvalidInput()) {\r\n            this._buttonElement.classList.add(this._inactiveButtonClass)\r\n        } else {\r\n            this._buttonElement.classList.remove(this._inactiveButtonClass)\r\n        }\r\n    }\r\n\r\n    _setEventListeners() {\r\n        //устанавливает состояние кнопки submit еще до изменения инпутов\r\n        this._toggleButtonState()\r\n        //прослушки для инпутов\r\n        this._inputList.forEach((inputElement) => {\r\n            inputElement.addEventListener('input', () => {\r\n                this._checkInputValidity(inputElement)\r\n                this._toggleButtonState()\r\n            })\r\n        })\r\n    }\r\n    enableValidation() {\r\n        this._setEventListeners()\r\n    }\r\n}\r\n","import React from 'react'\nimport { formSelectorsObj } from '../utils/utils'\nimport { FormValidator } from './FormValidator'\n\nfunction PopupWithForm({\n    title,\n    name,\n    buttonText,\n    isOpen,\n    onClose,\n    onSubmit,\n    children,\n}) {\n    function formValidate() {\n        if (isOpen) {\n            const currentForm = document.querySelector(\n                `.popup__form_type_${name}`\n            )\n            // будет валидировать форму\n            const formValidator = new FormValidator(\n                formSelectorsObj,\n                currentForm\n            )\n            formValidator.enableValidation()\n            return !formValidator.hasInvalidInput()\n        }\n    }\n    formValidate()\n\n    // очистит форму от введенного в инпут текста, ошибок валидации и закроет попап\n    function closeReset() {\n        document.querySelector(`.popup__form_type_${name}`).reset()\n        onClose()\n        window.removeEventListener('keydown', handleEscClose)\n    }\n    //закрывает при нажатии esc\n    function handleEscClose(evt) {\n        if (evt.key === 'Escape') {\n            closeReset()\n        }\n    }\n    //закрывает попап при нажатии на фон\n    function closePopupByClickingOverlay(event) {\n        if (event.target === event.currentTarget) {\n            closeReset()\n        }\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault()\n        if (formValidate()) {\n            onSubmit(e)\n            document.querySelector(`.popup__form_type_${name}`).reset()\n        }\n    }\n    // проверяет нажатие esc\n    if (isOpen) {\n        window.addEventListener('keydown', (evt) => handleEscClose(evt))\n    }\n\n    return (\n        <section\n            className={`popup popup_type_${name} ${isOpen && 'popup_opened'}`}\n            onClick={closePopupByClickingOverlay}\n        >\n            <div className=\"popup__container\">\n                <button\n                    className=\"link popup__close-button\"\n                    onClick={closeReset}\n                />\n                <form\n                    className={`popup__form popup__form_type_${name}`}\n                    noValidate\n                    name={name}\n                    onSubmit={handleSubmit}\n                >\n                    <h2 className=\"popup__title\">{title}</h2>\n                    <fieldset className=\"popup__fieldset\">\n                        {children}\n                        <button\n                            className={`link popup__save-button popup__save-button_type_${name}`}\n                            autoFocus\n                            type=\"submit\"\n                        >\n                            {buttonText}\n                        </button>\n                    </fieldset>\n                </form>\n            </div>\n        </section>\n    )\n}\n\nexport default PopupWithForm\n","import React from 'react'\r\nimport PopupWithForm from './PopupWithForm'\r\n\r\nfunction PopupWithSubmit({\r\n    title,\r\n    name,\r\n    card,\r\n    cardDOM,\r\n    buttonText,\r\n    isOpen,\r\n    onClose,\r\n    onCardDeleteSubmit,\r\n}) {\r\n    function handleSubmit(e) {\r\n        // Запрещаем браузеру переходить по адресу формы\r\n        e.preventDefault()\r\n        onCardDeleteSubmit(card, cardDOM)\r\n    }\r\n    return (\r\n        <PopupWithForm\r\n            title={title}\r\n            name={name}\r\n            buttonText={buttonText}\r\n            isOpen={isOpen}\r\n            onClose={onClose}\r\n            onSubmit={handleSubmit}\r\n        ></PopupWithForm>\r\n    )\r\n}\r\n\r\nexport default PopupWithSubmit\r\n","import React from 'react'\n\nfunction ImagePopup({ card, onClose, isOpen, name }) {\n    function close() {\n        onClose()\n        window.removeEventListener('keydown', handleEscClose)\n    }\n    //закрывает при нажатии esc\n    function handleEscClose(evt) {\n        if (evt.key === 'Escape') {\n            close()\n        }\n    }\n    //закрывает попап при нажатии на фон\n    function closePopupByClickingOverlay(event) {\n        if (event.target === event.currentTarget) {\n            close()\n        }\n    }\n\n    if (card) {\n        window.addEventListener('keydown', handleEscClose)\n\n        return (\n            <section\n                className={`popup popup_type_${name} ${\n                    isOpen && 'popup_opened'\n                }`}\n                onClick={closePopupByClickingOverlay}\n            >\n                <div className=\"popup__container-pic-zoom\">\n                    <button\n                        className=\"link popup__close-button\"\n                        onClick={close}\n                    />\n                    <figure className=\"picture-zoom\">\n                        <img\n                            src={card.link}\n                            alt={card.name}\n                            className=\"picture-zoom__img\"\n                        />\n                        <p className=\"picture-zoom__title\">{card.name}</p>\n                    </figure>\n                </div>\n            </section>\n        )\n    } else return ''\n}\n\nexport default ImagePopup\n","import React, { useState, useEffect } from 'react'\r\nimport PopupWithForm from './PopupWithForm'\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext'\r\n\r\nfunction EditProfilePopup({ isOpen, onClose, onUpdateUser }) {\r\n    const currentUser = React.useContext(CurrentUserContext)\r\n\r\n    // для заполнения инпутов текущими данными пользователя\r\n    const [name, setName] = useState('')\r\n    const [description, setDescription] = useState('')\r\n\r\n    // После загрузки текущего пользователя из API\r\n    // его данные будут использованы в управляемых компонентах.\r\n    useEffect(() => {\r\n        setName(currentUser.name)\r\n        setDescription(currentUser.about)\r\n    }, [currentUser])\r\n    // при введении текста в инпут будет обновлять стейт\r\n    function handleNameChange(e) {\r\n        setName(e.target.value)\r\n    }\r\n    function handleDescribChange(e) {\r\n        setDescription(e.target.value)\r\n    }\r\n\r\n    function handleClose() {\r\n        // если изменены инпуты, но не засабмичены, то не станет сохранять их values ????????????????????????\r\n        setName(currentUser.name)\r\n        setDescription(currentUser.about)\r\n\r\n        onClose()\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        // Запрещаем браузеру переходить по адресу формы\r\n        e.preventDefault()\r\n\r\n        // Передаём значения управляемых компонентов во внешний обработчик\r\n        onUpdateUser({\r\n            name,\r\n            about: description,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <PopupWithForm\r\n            title=\"Редактировать профиль\"\r\n            name=\"edit-profile\"\r\n            buttonText=\"Сохранить\"\r\n            isOpen={isOpen}\r\n            onClose={handleClose}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <label className=\"popup__label\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={name}\r\n                    onChange={handleNameChange}\r\n                    name=\"profile-name\"\r\n                    placeholder=\"Имя\"\r\n                    id=\"profile-name\"\r\n                    className=\"input popup__input popup__input_type_name\"\r\n                    required\r\n                    minLength=\"2\"\r\n                    maxLength=\"40\"\r\n                />\r\n                <span className=\"popup__input-error js-popup__input-error_type_profile\"></span>\r\n            </label>\r\n            <label className=\"popup__label\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={description}\r\n                    onChange={handleDescribChange}\r\n                    name=\"profile-job\"\r\n                    id=\"profile-job\"\r\n                    placeholder=\"Род деятельности\"\r\n                    className=\"input popup__input popup__input_type_job\"\r\n                    required\r\n                    minLength=\"2\"\r\n                    maxLength=\"200\"\r\n                />\r\n                <span className=\"popup__input-error js-popup__input-error_type_profile\"></span>\r\n            </label>\r\n        </PopupWithForm>\r\n    )\r\n}\r\n\r\nexport default EditProfilePopup\r\n","import React, { useState, useRef } from 'react'\r\nimport PopupWithForm from './PopupWithForm'\r\n\r\nfunction EditAvatarPopup({ isOpen, onClose, onUpdateAvatar }) {\r\n    const avatarInput = useRef({})\r\n    const [avatar, setAvatar] = useState('')\r\n\r\n    function handleChange(e) {\r\n        setAvatar(e.target.value)\r\n    }\r\n    function handleSubmit(e) {\r\n        onUpdateAvatar({\r\n            avatar: avatarInput.current.value,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <PopupWithForm\r\n            title=\"Обновить аватар\"\r\n            name=\"edit-avatar\"\r\n            buttonText=\"Сохранить\"\r\n            isOpen={isOpen}\r\n            onClose={onClose}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <label className=\"popup__label\">\r\n                <input\r\n                    ref={avatarInput}\r\n                    onChange={handleChange}\r\n                    type=\"url\"\r\n                    name=\"avatar\"\r\n                    id=\"avatar\"\r\n                    placeholder=\"Ссылка на картинку\"\r\n                    className=\"input popup__input popup__input_type_avatar\"\r\n                    required\r\n                />\r\n                <span className=\"popup__input-error\"></span>\r\n            </label>\r\n        </PopupWithForm>\r\n    )\r\n}\r\n\r\nexport default EditAvatarPopup\r\n","import React, { useState } from 'react'\r\nimport PopupWithForm from './PopupWithForm'\r\n\r\nfunction AddPlacePopup({ isOpen, onClose, onAddPlace }) {\r\n    const [cardName, setCardName] = useState('')\r\n    const [cardDescription, setCardDescription] = useState('')\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault()\r\n\r\n        onAddPlace({\r\n            name: cardName,\r\n            link: cardDescription,\r\n        })\r\n        setCardName('')\r\n        setCardDescription('')\r\n    }\r\n\r\n    function handleNameChange(e) {\r\n        setCardName(e.target.value)\r\n    }\r\n    function handleDescibChange(e) {\r\n        setCardDescription(e.target.value)\r\n    }\r\n    function close() {\r\n        setCardName('')\r\n        setCardDescription('')\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <PopupWithForm\r\n            title=\"Новое место\"\r\n            name=\"add-place\"\r\n            buttonText=\"Создать\"\r\n            isOpen={isOpen}\r\n            onClose={close}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <label className=\"popup__label\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={cardName}\r\n                    onChange={handleNameChange}\r\n                    name=\"place-name\"\r\n                    placeholder=\"Название\"\r\n                    id=\"place-name\"\r\n                    className=\"input popup__input popup__input_type_place-name\"\r\n                    required\r\n                    minLength=\"2\"\r\n                    maxLength=\"30\"\r\n                />\r\n                <span className=\"popup__input-error\"></span>\r\n            </label>\r\n            <label className=\"popup__label\">\r\n                <input\r\n                    type=\"url\"\r\n                    value={cardDescription}\r\n                    onChange={handleDescibChange}\r\n                    name=\"place-pic\"\r\n                    id=\"place-pic\"\r\n                    placeholder=\"Ссылка на картинку\"\r\n                    className=\"input popup__input popup__input_type_place-pic\"\r\n                    required\r\n                />\r\n                <span className=\"popup__input-error\"></span>\r\n            </label>\r\n        </PopupWithForm>\r\n    )\r\n}\r\n\r\nexport default AddPlacePopup\r\n","import React, { useEffect, useState } from 'react'\nimport api from '../utils/api'\nimport Header from './Header'\nimport Main from './Main'\nimport Footer from './Footer'\nimport PopupWithSubmit from './PopupWithSubmit'\nimport ImagePopup from './ImagePopup'\nimport { CurrentUserContext } from '../contexts/CurrentUserContext'\nimport EditProfilePopup from './EditProfilePopup'\nimport EditAvatarPopup from './EditAvatarPopup'\nimport AddPlacePopup from './AddPlacePopup'\nimport { cleanInputErrors } from './FormValidator'\n\nfunction App() {\n    //состояние попапов\n    const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false)\n    const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false)\n    const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false)\n    const [isCardDeletePopupOpen, setIsCardDeletePopupOpen] = useState(false)\n    const [isImgPopupOpen, setIsImgPopupOpen] = useState(false)\n\n    const [cards, setCards] = useState([])\n\n    const profileAvatarSelector = '.profile__image'\n    // Данные текущего пользователя будут использованы как контекст (пока не пришли даннные с сервера покажет Жака)\n    const [currentUser, setCurrentUser] = useState({\n        name: 'Жак Ив Кусто',\n        about: 'Мореплаватель',\n        avatar:\n            'https://kaskad.tv/images/2020/foto_zhak_iv_kusto__-_interesnie_fakti_20190810_2078596433.jpg',\n    })\n    // для попапа с полноразмерной картинкой\n    const [selectedCard, setSelectedCard] = useState()\n    // для удаления карточки\n    const [selectedCardDOM, setSelectedCardDOM] = useState()\n\n    // открывают попапы\n    function handleEditAvatarClick() {\n        setIsEditAvatarPopupOpen(true)\n    }\n    function handleEditProfileClick() {\n        setIsEditProfilePopupOpen(true)\n    }\n    function handleAddPlaceClick() {\n        setIsAddPlacePopupOpen(true)\n    }\n\n    //для открытия попапа с увеличенной картинкой\n    function handleCardClick(card) {\n        setSelectedCard(card)\n        setIsImgPopupOpen(true)\n    }\n\n    // закрывает все попапы меняя их состояние\n    function closeAllPopups() {\n        //убирает уведомления об ошибках от предыдущих инпутов\n        cleanInputErrors()\n\n        setIsEditAvatarPopupOpen(false)\n        setIsEditProfilePopupOpen(false)\n        setIsAddPlacePopupOpen(false)\n        setSelectedCard()\n        setIsCardDeletePopupOpen(false)\n        setIsImgPopupOpen(false)\n        setSelectedCardDOM()\n    }\n\n    // при монтировании компонента будет совершать запрос в API за пользовательскими данными и карточками\n    useEffect(() => {\n        Promise.all([api.getItems('users/me'), api.getItems('cards')])\n            .then((values) => {\n                const [userData, serverCards] = values\n                // отображает данные пользователья в профиле\n                setCurrentUser(userData)\n\n                // отоьразит карточки с сервера\n                const items = serverCards.map((item) => ({\n                    name: item.name,\n                    link: item.link,\n                    _id: item._id,\n                    likes: item.likes,\n                    owner: item.owner,\n                }))\n                setCards(items)\n            })\n            .catch((err) => {\n                console.log(`Загрузка информации о пользователе и карточек: ${err}`)\n            })\n    }, [])\n\n    // варианты замены текста кнопок при ожидании загрузки\n    const loadingText = 'Сохранение...'\n    const defaultSaveText = 'Сохранить'\n    const defaultCreateText = 'Создать'\n    const defaultYesText = 'Да'\n    // заменит текст кнопок при ожидании процесса загрузки данных на сервер\n    function renderLoading(isLoading, button, text) {\n        if (isLoading) {\n            button.textContent = loadingText\n        } else {\n            button.textContent = text\n        }\n    }\n    function handleCardLike(card) {\n        // проверяем, есть ли уже лайк на этой карточке\n        const isLiked = card.likes.some((i) => i._id === currentUser._id)\n\n        // Отправляем запрос в API и получаем обновлённые данные карточки\n        api.changeLikeCardStatus(card._id, !isLiked)\n            .then((newCard) => {\n                // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\n                const newCards = cards.map((c) =>\n                    c._id === card._id ? newCard : c\n                )\n                // Обновляем стейт\n                setCards(newCards)\n            })\n            .catch((err) => {\n                console.log(`Изменения статуса лайка: ${err}`)\n            })\n    }\n\n    function handleCardDeleteSubmit(card, cardDOMElement) {\n        const cardDeleteSubmitButton = document.querySelector(\n            '.popup__save-button_type_card-delete'\n        )\n        // ожидание загрузки\n        renderLoading(true, cardDeleteSubmitButton, defaultYesText)\n        api.deleteItem('cards', card._id)\n            .then(() => {\n                //вызывает удаление карточки из разметки\n                cardDOMElement.remove()\n            })\n            .then(() => {\n                closeAllPopups()\n            })\n            .catch((err) => {\n                console.log(`При удалении карточки: ${err}`)\n            })\n            .finally(() =>\n                renderLoading(false, cardDeleteSubmitButton, defaultYesText)\n            )\n    }\n    // удаляет карточку\n    function handleCardDelete(card, cardDOMElement) {\n        setIsCardDeletePopupOpen(true)\n        setSelectedCard(card)\n        setSelectedCardDOM(cardDOMElement)\n    }\n    // обновляет профиль\n    function handleUpdateUser(userData) {\n        const profileSubmitButton = document.querySelector(\n            '.popup__save-button_type_edit-profile'\n        )\n        // ожидание загрузки\n        renderLoading(true, profileSubmitButton, defaultSaveText)\n\n        api.changeItem(\n            {\n                name: userData.name.trim(),\n                about: userData.about.trim(),\n            },\n            'users/me'\n        )\n            .then((res) => {\n                //установим новые данные профиля в разметке\n                setCurrentUser(res)\n            })\n            .then(() => {\n                closeAllPopups()\n            })\n            .catch((err) => {\n                console.log(`При обновлении информации о пользователе: ${err}`)\n            })\n            .finally(() => {\n                renderLoading(false, profileSubmitButton, defaultSaveText)\n            })\n    }\n\n    function handleUpdateAvatar(userData) {\n        const avatarSubmitButton = document.querySelector(\n            '.popup__save-button_type_edit-avatar'\n        )\n        // до получения ответа от сервера покажет пользователю надпись о процессе загрузки\n        renderLoading(true, avatarSubmitButton, defaultSaveText)\n\n        api.changeItem({ avatar: userData.avatar }, 'users/me/avatar')\n            .then((res) => {\n                //установим новые данные профиля\n                setCurrentUser(res)\n                // установим новый аватар в разметке\n                document.querySelector(\n                    profileAvatarSelector\n                ).style.backgroundImage = `url('${res.avatar}')`\n            })\n            .then(() => {\n                closeAllPopups()\n            })\n            .catch((err) => {\n                console.log(`При изменении аватара пользователя: ${err}`)\n            })\n            .finally(() => {\n                renderLoading(false, avatarSubmitButton, defaultSaveText)\n            })\n    }\n    // добавит новую карточку места\n    function handleAddPlaceSubmit(newCard) {\n        const placeSubmitButton = document.querySelector(\n            '.popup__save-button_type_add-place'\n        )\n        // до получения ответа от сервера покажет пользователю надпись о процессе загрузки\n        renderLoading(true, placeSubmitButton, defaultCreateText)\n\n        api.createItem(newCard, 'cards')\n            // создаст ее в разметке\n            .then((newCard) => {\n                setCards([newCard, ...cards])\n            })\n            .then(() => {\n                closeAllPopups()\n            })\n            .catch((err) => {\n                console.log(`Добавление карточки: ${err}`)\n            })\n            .finally(() => {\n                renderLoading(false, placeSubmitButton, defaultCreateText)\n            })\n    }\n\n    return (\n        <div className=\"App\">\n            <CurrentUserContext.Provider value={currentUser}>\n                <div className=\"page\">\n                    <div className=\"page__container\">\n                        <Header />\n                        <Main\n                            onEditProfile={handleEditProfileClick}\n                            onAddPlace={handleAddPlaceClick}\n                            onEditAvatar={handleEditAvatarClick}\n                            handleCardClick={handleCardClick}\n                            cards={cards}\n                            onCardLike={handleCardLike}\n                            onCardDelete={handleCardDelete}\n                        />\n                        <Footer />\n                        <EditProfilePopup\n                            isOpen={isEditProfilePopupOpen}\n                            onClose={closeAllPopups}\n                            onUpdateUser={handleUpdateUser}\n                        />\n\n                        <AddPlacePopup\n                            isOpen={isAddPlacePopupOpen}\n                            onClose={closeAllPopups}\n                            onAddPlace={handleAddPlaceSubmit}\n                        />\n\n                        <EditAvatarPopup\n                            isOpen={isEditAvatarPopupOpen}\n                            onClose={closeAllPopups}\n                            onUpdateAvatar={handleUpdateAvatar}\n                        />\n\n                        <PopupWithSubmit\n                            title=\"Вы уверены?\"\n                            name=\"card-delete\"\n                            card={selectedCard}\n                            cardDOM={selectedCardDOM}\n                            buttonText=\"Да\"\n                            isOpen={isCardDeletePopupOpen}\n                            onClose={closeAllPopups}\n                            onCardDeleteSubmit={handleCardDeleteSubmit}\n                        ></PopupWithSubmit>\n\n                        <ImagePopup\n                            name=\"picture-zoom\"\n                            isOpen={isImgPopupOpen}\n                            card={selectedCard}\n                            onClose={closeAllPopups}\n                        />\n                    </div>\n                </div>\n            </CurrentUserContext.Provider>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/logo.a56cd5e0.svg\";"],"sourceRoot":""}